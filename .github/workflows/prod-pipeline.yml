name: Production CI Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - master

jobs:
  dependency-check:
    name: Dependency Scan with Trivy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: 'fs'
          format: 'table'
          output: 'trivy.txt'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_DISABLE_VEX_NOTICE: true

      - name: Publish Trivy Output to Summary
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .env File
        run: |
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.PROD_NEXT_PUBLIC_BASE_URL }}" > .env
          echo "NEXT_PUBLIC_BASE_URL_BLOG=${{ secrets.PROD_NEXT_PUBLIC_BASE_URL_BLOG }}" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/rstubryan/tascrum-web-prod:latest
            ghcr.io/rstubryan/tascrum-web-prod:${{ github.sha }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}

      - name: Update Docker Stack YAML with versioned image
        run: |
          # Only update the web-prod service image, preserve Grafana and others
          sed -i 's|image: ghcr.io/rstubryan/tascrum-web-prod:latest|image: ghcr.io/rstubryan/tascrum-web-prod:${{ github.sha }}|' docker-stack.yaml

      - name: Create directory and deploy
        id: deploy
        run: |
          # First create the base directory
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "mkdir -p /root/tascrum"
          
          # Then create the configs directory
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "mkdir -p /root/tascrum/configs"
          
          # Copy the stack file and config files
          scp -o StrictHostKeyChecking=no docker-stack.yaml ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/root/tascrum/
          scp -o StrictHostKeyChecking=no configs/* ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/root/tascrum/configs/
          
          # Configure Docker to authenticate with GitHub Container Registry on the server
          echo "Configuring Docker login on server..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} << EOF
            echo '${{ secrets.GHCR_PAT }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          EOF
          
          # Use zero-downtime deployment with rollback capability
          echo "Deploying stack with zero-downtime and rollback capability..."
          DEPLOYMENT_STATUS=$(ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
            cd /root/tascrum
            
            # Get current image tag to deploy
            WEB_PROD_IMAGE_TAG=$(cat docker-stack.yaml | grep "image: ghcr.io/rstubryan/tascrum-web-prod:" | cut -d':' -f3)
            echo "Pulling web-prod image with tag: $WEB_PROD_IMAGE_TAG"
            docker pull ghcr.io/rstubryan/tascrum-web-prod:$WEB_PROD_IMAGE_TAG
            
            # Store current image tag for rollback if needed
            CURRENT_IMAGE_TAG=$WEB_PROD_IMAGE_TAG
            
            # Store last successful version for potential rollback
            if docker stack ls | grep -q "tascrum" && docker service ls | grep -q "tascrum_web-prod"; then
              LAST_SUCCESSFUL_TAG=$(docker service inspect tascrum_web-prod --format '{{.Spec.TaskTemplate.ContainerSpec.Image}}' | cut -d':' -f3)
              echo "$LAST_SUCCESSFUL_TAG" > /root/tascrum/last_successful_prod_version.txt
              echo "Last successful version: $LAST_SUCCESSFUL_TAG"
            else
              echo "No previous successful deployment found for web-prod"
            fi
            
            # Check if stack exists
            if docker stack ls | grep -q "tascrum"; then
              # Check if configs directory has changed by comparing file checksums
              if [[ -d "/root/tascrum/configs.old" ]]; then
                CONFIG_CHANGED=$(diff -r /root/tascrum/configs /root/tascrum/configs.old >/dev/null 2>&1; echo $?)
                if [[ "$CONFIG_CHANGED" -ne "0" ]]; then
                  echo "Config changes detected, performing full redeployment..."
                  docker stack rm tascrum
                  echo "Waiting for stack removal to complete..."
                  sleep 15
                else
                  echo "No config changes detected, using zero-downtime update..."
                fi
              else
                # First time comparison, create backup of configs
                mkdir -p /root/tascrum/configs.old
                cp -r /root/tascrum/configs/* /root/tascrum/configs.old/
              fi
            fi
            
            # Deploy stack (either fresh or update)
            echo "Deploying stack..."
            docker stack deploy -c docker-stack.yaml tascrum
            
            # Health check - wait for service to be fully deployed
            echo "Waiting for services to be running... (timeout: 180s)"
            DEPLOY_FAILED=false
            timeout 180s bash -c 'until docker service ls --filter "name=tascrum_web-prod" --format "{{.Replicas}}" | grep -q "[0-9]/[0-9]" && [[ "$(docker service ls --filter "name=tascrum_web-prod" --format "{{.Replicas}}" | grep -o "[0-9]*/[0-9]*" | awk -F "/" "{ if (\$1==\$2) print \"healthy\"; else print \"unhealthy\" }")" == "healthy" ]]; do sleep 5; echo "Waiting for deployment..."; done' || DEPLOY_FAILED=true
            
            # Check if deployment succeeded
            if [[ "$DEPLOY_FAILED" == "true" ]]; then
              echo "Deployment failed or timed out. Checking service logs..."
              docker service logs tascrum_web-prod --tail 50
              
              # Attempt rollback if we have a previous version
              if [[ -f "/root/tascrum/last_successful_prod_version.txt" ]]; then
                ROLLBACK_TAG=$(cat /root/tascrum/last_successful_prod_version.txt)
                echo "Rolling back to last successful version: $ROLLBACK_TAG"
                
                # Update stack file with previous version
                sed -i "s|image: ghcr.io/rstubryan/tascrum-web-prod:$CURRENT_IMAGE_TAG|image: ghcr.io/rstubryan/tascrum-web-prod:$ROLLBACK_TAG|" docker-stack.yaml
                
                # Deploy previous version
                docker stack deploy -c docker-stack.yaml tascrum
                echo "Rollback complete. Using previous version: $ROLLBACK_TAG"
                echo "ROLLBACK"
              else
                echo "No previous successful version found for rollback"
                echo "FAILED"
              fi
            else
              # Application seems to be running, check with HTTP request
              echo "Service deployed successfully. Checking application health..."
              
              # Wait for traefik to route requests
              sleep 10
              
              # Check if the application responds properly (adjust URL as needed)
              HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://tascrum.site || echo "000")
              
              if [[ "$HTTP_STATUS" == "200" || "$HTTP_STATUS" == "301" || "$HTTP_STATUS" == "302" ]]; then
                echo "Application is responding with HTTP $HTTP_STATUS. Deployment successful!"
                
                # Backup configs for future comparison
                rm -rf /root/tascrum/configs.old
                mkdir -p /root/tascrum/configs.old
                cp -r /root/tascrum/configs/* /root/tascrum/configs.old/
                
                echo "SUCCESS"
              else
                echo "Application is not responding properly. HTTP status: $HTTP_STATUS"
                
                # Attempt rollback if we have a previous version
                if [[ -f "/root/tascrum/last_successful_prod_version.txt" ]]; then
                  ROLLBACK_TAG=$(cat /root/tascrum/last_successful_prod_version.txt)
                  echo "Rolling back to last successful version: $ROLLBACK_TAG"
                  
                  # Update stack file with previous version
                  sed -i "s|image: ghcr.io/rstubryan/tascrum-web-prod:$CURRENT_IMAGE_TAG|image: ghcr.io/rstubryan/tascrum-web-prod:$ROLLBACK_TAG|" docker-stack.yaml
                  
                  # Deploy previous version
                  docker stack deploy -c docker-stack.yaml tascrum
                  echo "Rollback complete. Using previous version: $ROLLBACK_TAG"
                  echo "ROLLBACK"
                else
                  echo "No previous successful version found for rollback"
                  echo "FAILED"
                fi
              fi
            fi
            
            echo "Deployment process completed. Stack services:"
            docker stack services tascrum
          EOF
          )
          
          # Check deployment status and exit accordingly
          if [[ "$DEPLOYMENT_STATUS" == *"ROLLBACK"* ]]; then
            echo "::warning::Deployment failed, rolled back to previous version"
            echo "::set-output name=status::rolled-back"
          elif [[ "$DEPLOYMENT_STATUS" == *"FAILED"* ]]; then
            echo "::error::Deployment failed and rollback was not possible"
            exit 1
          else
            echo "::notice::Deployment successful"
            echo "::set-output name=status::success"
          fi