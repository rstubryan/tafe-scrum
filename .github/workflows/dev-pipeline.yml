name: Development CI Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - development

jobs:
  dependency-check:
    name: Dependency Scan with Trivy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          output: 'trivy-results.txt'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        env:
          TRIVY_DISABLE_VEX_NOTICE: true

      - name: Publish Trivy Output to Summary
        run: |
          echo "### Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat trivy-results.txt >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found or scan failed" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .env File
        run: |
          cp .env.example .env
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.DEV_NEXT_PUBLIC_BASE_URL }}" > .env
          echo "NEXT_PUBLIC_BASE_URL_BLOG=${{ secrets.DEV_NEXT_PUBLIC_BASE_URL_BLOG }}" >> .env
          echo "NODE_ENV=development" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/rstubryan/tascrum-web:latest
            ghcr.io/rstubryan/tascrum-web:${{ github.sha }}

  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Docker Stack YAML with versioned image
        run: |
          sed -i 's|image: ghcr.io/rstubryan/tascrum-web:latest|image: ghcr.io/rstubryan/tascrum-web:${{ github.sha }}|' docker-stack.yaml

      - name: Create directories on server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /root/tascrum
            mkdir -p /root/tascrum/configs

      - name: Copy configuration files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          source: "docker-stack.yaml,configs/*"
          target: "/root/tascrum"

      - name: Configure Docker authentication
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            echo '${{ secrets.GHCR_PAT }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            export GIT_COMMIT_HASH=${{ github.sha }}
            export DEPLOY_TIMESTAMP=$(date +%Y%m%d%H%M%S)

      - name: Pull the latest image first
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd /root/tascrum
            # Pull directly using the github.sha instead of trying to extract from file
            echo "Pulling web-dev image with tag: ${{ github.sha }}"
            docker pull ghcr.io/rstubryan/tascrum-web:${{ github.sha }}

      - name: Deploy Docker stack
        uses: cssnr/stack-deploy-action@v1
        with:
          name: 'tascrum'
          file: 'docker-stack.yaml'
          host: ${{ secrets.PROD_SSH_HOST }}
          user: ${{ secrets.PROD_SSH_USER }}
          ssh_key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          registry_auth: true
          registry_host: 'ghcr.io'
          registry_user: ${{ github.actor }}
          registry_pass: ${{ secrets.GHCR_PAT }}
          summary: true

      - name: Display stack services
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            echo "Deployment complete. Stack services:"
            docker stack services tascrum

      - name: Verify deployment success
        id: verify
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          command_timeout: "5m"
          script: |
            echo "Verifying deployment of web-dev service..."
            MAX_RETRIES=12
            RETRY_DELAY=5
            COUNTER=0
            
            while [ $COUNTER -lt $MAX_RETRIES ]; do
              SERVICE_STATUS=$(docker service ls --filter "name=tascrum_web-dev" --format "{{.Replicas}}")
              echo "Current status: $SERVICE_STATUS"
              
              if [[ "$SERVICE_STATUS" == "1/1" ]]; then
                echo "✅ Service deployed successfully!"
                echo "DEPLOYMENT_STATUS=success" >> $GITHUB_OUTPUT
                exit 0
              fi
              
              echo "Waiting for service to stabilize... ($COUNTER/$MAX_RETRIES)"
              sleep $RETRY_DELAY
              COUNTER=$((COUNTER+1))
            done
            
            echo "❌ Deployment verification failed after $MAX_RETRIES attempts"
            exit 1

      - name: Clean up old images
        if: success()
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            echo "Deployment successful! Cleaning up old images..."
            
            # Store current image ID to ensure we don't remove it
            CURRENT_IMAGE="ghcr.io/rstubryan/tascrum-web:${{ github.sha }}"
            LATEST_IMAGE="ghcr.io/rstubryan/tascrum-web:latest"
            
            echo "Current image: $CURRENT_IMAGE"
            echo "Latest image: $LATEST_IMAGE"
            
            # List all tascrum-web images
            echo "Listing all tascrum-web images:"
            docker images "ghcr.io/rstubryan/tascrum-web" --format "{{.Repository}}:{{.Tag}} {{.ID}}"
            
            # Find and remove old images, keeping current and latest
            echo "Removing old images (keeping current and latest):"
            docker images "ghcr.io/rstubryan/tascrum-web" --format "{{.Repository}}:{{.Tag}} {{.ID}}" | grep -v "${{ github.sha }}" | grep -v "latest" | while read -r img; do
              if [ -n "$img" ]; then
                echo "Removing old image: $img"
                docker rmi $img || true
              fi
            done
            
            echo "Image cleanup complete. Remaining images:"
            docker images "ghcr.io/rstubryan/tascrum-web"